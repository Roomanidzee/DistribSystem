Наша база данных немного повязана на абстракциях, поэтому я распишу здесь что к чему, чтобы лишний раз не уточнять

    Во первых - Container. Данная модель - просто хранилище общих полей для всех сущностей-контейнеров
    Лаборатории/Курсы/Практики/Научруки - создаём объекты только этих классов. Все поля Container будут доступны в них,
    а так же, уникальные id контейнера наследуются в них. Так что если захотим достать сущность по id, нужно будет
    в первую очередь определить, какой тип контейнеров она представляет. Однако, если мы уже знаем тип контейнера - его
    класс, отработать с ним можно достаточно спокойно - все поля уникальны. Не может быть, например, лаборатории и курса
    с одинаковыми id.
    Сам контейнер знает своего руководителя, так что оперировать с ним можно многими способами.
    Контейнер так же хранит о себе инфу о своем типе для быстрого доступа(хранение происходит по перечислению - доп инфа в
    комментариях к коду)

    Во вторых - StudentToLabStorage. В данную таблицу помещаются соответствия id Container(спасибо уникальности id -
    при необходимости мы можем получить инстанс объекта), и id User(в данном случае - всегда Student).
    Помещаются только пары из ACCEPTED Request.

    Сам Request - ничего сложного. Так же самыми важными полями являются id Container и id User(Student)
    Так же в Request хранится тип контейнера. Его мы тащим из запроса студента и присваиваем в коде. Необходим для быстрого
    доступа и поиска по бд. Отсюда тянем тип необходимого контейнера. (см. про Container)
    Статус храним перечислением интов - инфа так же в коде.

Далее роли пользователей

    Созданы для хранения уникальной информации. Все таблицы знают своих User-ов. У одного User-а может быть несколько
    "ролей", однако он сам не потеряет при этом своей уникальности в БД.

    Несмотря на это, эти таблицы использовать ТОЛЬКО для получения "экстра-информации", вроде группы у студента.
    Добавлять поля при необходимости(Согласовать с ТЗ и коллегами)))

    Для операций во views.py НАСТОЙЧИВО РЕКОМЕНДУЮ использовать стандартные джанговские группы. Это ускорит процесс,
    и избавит от лишних поисковых запросов к бд.

        Вся схема их ииспользования выглядит так - при регистрации цепляем к User-у выбранные им группы, и создаём
        для него строки в соответствующих таблицах. При необходимости вывести additional информацию лезем в БД и тащим
        инфу оттуда, при необходимости выяснить сущность User-a смотрим на его группы.


Надеюсь, это прольёт немного света на произошедшие хаотические реформации нашей бд)